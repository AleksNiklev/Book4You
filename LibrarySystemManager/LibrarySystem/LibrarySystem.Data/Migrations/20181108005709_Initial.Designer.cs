// <auto-generated />
using System;
using LibrarySystem.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibrarySystem.Data.Migrations
{
    [DbContext(typeof(LibrarySystemContext))]
    [Migration("20181108005709_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LibrarySystem.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TownId");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new { Id = 1, StreetAddress = "AdminAddres", TownId = 1 }
                    );
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new { Id = 1, Name = "Stephen King" },
                        new { Id = 2, Name = "George R R Martin" },
                        new { Id = 3, Name = "Paulo Coelho" },
                        new { Id = 4, Name = "JK Rowling" },
                        new { Id = 5, Name = "Orson Scott Card" },
                        new { Id = 6, Name = "Suzanne Collins" },
                        new { Id = 7, Name = "Stephenie Meyer" },
                        new { Id = 8, Name = "John Green" },
                        new { Id = 9, Name = "Arthur Golden" },
                        new { Id = 10, Name = "Yann Martel" },
                        new { Id = 11, Name = "Charles Dickens" },
                        new { Id = 12, Name = "Dan Brown" },
                        new { Id = 13, Name = "Victor Hugo" },
                        new { Id = 15, Name = "Veronica Roth" },
                        new { Id = 16, Name = "JRR Tolkien" },
                        new { Id = 17, Name = "Arthur Hertzberg" },
                        new { Id = 18, Name = "John Richardson" }
                    );
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<int>("BooksInStore");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("GenreId");

                    b.Property<string>("ImageName");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new { Id = new Guid("8fb9cdd3-66a0-4681-8362-bac679eb1386"), AuthorId = 1, BooksInStore = 10, Description = "An English teacher travels back to 1958 by way of a time portal in a Maine diner. His assignment: Stop Lee Harvey Oswald.", GenreId = 4, Title = "11/22/63" },
                        new { Id = new Guid("a5865078-7742-4c1c-aa3d-08cac69d5ac1"), AuthorId = 1, BooksInStore = 10, Description = "An elderly widower watches baseballt to distract himself from his wife's death, but figures from his past appear every night in the seat behind home plate; a Kindle single.", GenreId = 3, Title = "A FACE IN THE CROWD" },
                        new { Id = new Guid("de27622d-b4d5-4b47-b6f0-30b101ee4594"), AuthorId = 1, BooksInStore = 10, Description = "An unsuspecting accountant's wife makes a disturbing discovery; first published in 2010, now a movie.", GenreId = 8, Title = "A GOOD MARRIAGE" },
                        new { Id = new Guid("69dc432f-ad47-4066-908d-9244b623bbbb"), AuthorId = 1, BooksInStore = 10, Description = "This series, about a new species of vampire that does not have the traditional weakness, shifts to Las Vegas in the 1930's and a number of corpses that have turned up drained of blood.", GenreId = 5, Title = "AMERICAN VAMPIRE, VOL. 1" },
                        new { Id = new Guid("6efad4db-a380-4dc6-9b45-4253788bad68"), AuthorId = 1, BooksInStore = 10, Description = "What do the roaring 20’s and the wild west have in common? Vampires.", GenreId = 8, Title = "AMERICAN VAMPIRE, VOL. 1" },
                        new { Id = new Guid("3bf3d883-b7ee-48d2-b13c-9a5c78735f55"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 8, Title = "Bag of Bones" },
                        new { Id = new Guid("f2d4b2e7-215c-4cb3-8290-5b9dcd3a9823"), AuthorId = 1, BooksInStore = 10, Description = "A tale about the dark side of baseball, circa 1957.", GenreId = 5, Title = "BLOCKADE BILLY" },
                        new { Id = new Guid("f2057be3-d32c-43b2-858a-1ce25a38e9bb"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 8, Title = "Cell: A Novel" },
                        new { Id = new Guid("10700046-9601-4b38-960d-9ff07762edb0"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 5, Title = "Christine (Signet)" },
                        new { Id = new Guid("f7fc354e-1233-4321-b1ea-0ebccb56a422"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 6, Title = "Danse Macabre" },
                        new { Id = new Guid("9382b92a-dddc-4fd4-9397-be21b4756d26"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 9, Title = "Different Seasons (Signet)" },
                        new { Id = new Guid("2c5093e3-82e3-4e0b-bf73-c467cbbb204e"), AuthorId = 1, BooksInStore = 10, Description = "Now grown up, Dan, the boy with psycho-intuitive powers in “The Shining,” helps another child with a spectacular gift.", GenreId = 8, Title = "DOCTOR SLEEP" },
                        new { Id = new Guid("551056a3-b407-42f6-980e-a3f2898d071e"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 7, Title = "Dolores Claiborne" },
                        new { Id = new Guid("1e4e0434-ac01-4922-9c7a-d0ead7c9b573"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 7, Title = "Dreamcatcher" },
                        new { Id = new Guid("d22a4520-b6bd-4671-979a-186347514def"), AuthorId = 1, BooksInStore = 10, Description = "A Minnesota contractor moves to Florida to recover from an injury and starts creating paintings with eerie powers.", GenreId = 5, Title = "DUMA KEY" },
                        new { Id = new Guid("a1b2f15b-0b3b-4f0b-87fa-b6184a1c5bbe"), AuthorId = 1, BooksInStore = 10, Description = "A man who is losing weight without getting thinner forms an unlikely alliance with his neighbors who are dealing with prejudices.", GenreId = 6, Title = "ELEVATION" },
                        new { Id = new Guid("53eb6de1-ae8a-4a4b-9ff1-e32a0732353e"), AuthorId = 1, BooksInStore = 10, Description = "The conclusion of the Bill Hodges trilogy.", GenreId = 2, Title = "END OF WATCH" },
                        new { Id = new Guid("d1f1057c-8e97-419b-9822-6d7e913d445d"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 4, Title = "Everything's Eventual: 14 Dark Tales" },
                        new { Id = new Guid("9982535d-c9cf-431b-9181-d0559ada599d"), AuthorId = 1, BooksInStore = 10, Description = "This second novel of the Bill Hodges trilogy involves a dead writer, his obsessed murderer and a coveted manuscript.", GenreId = 9, Title = "FINDERS KEEPERS" },
                        new { Id = new Guid("82d6e6f0-2344-43af-91cd-839cec19d7fa"), AuthorId = 1, BooksInStore = 10, Description = "Grisly human behavior and its consequences drive this collection of stories.", GenreId = 3, Title = "FULL DARK, NO STARS" },
                        new { Id = new Guid("f3b320e9-69ef-4c2c-a28d-4722e127a8ee"), AuthorId = 2, BooksInStore = 10, Description = "From the citadel of Dragonstone to the shores of Winterfell, factions vie for control of a divided land; Book 2 of \"A Song of Ice and Fire.\"", GenreId = 8, Title = "A CLASH OF KINGS" },
                        new { Id = new Guid("68aeb701-1261-4584-9d4e-35706c95ae03"), AuthorId = 2, BooksInStore = 10, Description = "After a colossal battle, the Seven Kingdoms face new threats.", GenreId = 7, Title = "A DANCE WITH DRAGONS" },
                        new { Id = new Guid("09c80279-1942-4eaf-924d-27051bbfd71c"), AuthorId = 2, BooksInStore = 10, Description = "The seven powers dividing the land have reached an uneasy truce; Book 4 of \"A Song of Ice and Fire.\"", GenreId = 2, Title = "A FEAST FOR CROWS" },
                        new { Id = new Guid("217597ec-ffee-470e-8707-b8671f320184"), AuthorId = 2, BooksInStore = 10, Description = "In the frozen wastes to the north of Winterfell, sinister and supernatural forces are mustering. Basis of the HBO series.", GenreId = 9, Title = "A GAME OF THRONES" },
                        new { Id = new Guid("93c37228-ecb9-4c87-9f40-bdaa3e85fcbc"), AuthorId = 2, BooksInStore = 10, Description = "The collected Song of Ice and Fire series.", GenreId = 3, Title = "A GAME OF THRONES: FIVE-BOOK SET" },
                        new { Id = new Guid("339f6e00-7eb3-479d-8b6d-583ae8777336"), AuthorId = 2, BooksInStore = 10, Description = "A collection of three official prequels to “A Song of Ice and Fire.”", GenreId = 2, Title = "A KNIGHT OF THE SEVEN KINGDOMS" },
                        new { Id = new Guid("1da8f275-0bcb-4f34-bab5-5ac178ab14ab"), AuthorId = 2, BooksInStore = 10, Description = "A set that includes the first four volumes of Martin's epic fantasy series.", GenreId = 7, Title = "A SONG OF ICE AND FIRE" },
                        new { Id = new Guid("1d28826c-3e2d-462d-80d2-fa29908a15d6"), AuthorId = 2, BooksInStore = 10, Description = "Wars continue to rage over the Iron Throne as alliances are made and broken; Book 3 of \"A Song of Ice and Fire.\"", GenreId = 2, Title = "A STORM OF SWORDS" },
                        new { Id = new Guid("bb35f7b5-c729-40d7-a9f6-9d3b796a602e"), AuthorId = 2, BooksInStore = 10, Description = "", GenreId = 8, Title = "DANGEROUS WOMEN" },
                        new { Id = new Guid("7e178ce1-1ce2-4303-bf8d-6e162f1c1a99"), AuthorId = 2, BooksInStore = 10, Description = "Twenty-one original stories from well-known writers, including a new “Game of Thrones” story.", GenreId = 4, Title = "ROGUES" },
                        new { Id = new Guid("2f506d66-9092-4333-90db-ae107d31fc20"), AuthorId = 2, BooksInStore = 10, Description = "A girl tames a dragon and saves her farm.", GenreId = 4, Title = "THE ICE DRAGON" },
                        new { Id = new Guid("3ffca685-977b-493a-bb44-fd1153d6de2e"), AuthorId = 2, BooksInStore = 10, Description = "The history of the Westeros and more about the world of \"Game of Thrones.\"", GenreId = 1, Title = "THE WORLD OF ICE AND FIRE" },
                        new { Id = new Guid("6f55e385-72f9-48e5-9b05-e08b446fa1cb"), AuthorId = 3, BooksInStore = 10, Description = " A married journalist risks everything when she embarks on an affair; by the Brazilian writer, the author of The Alchemist.", GenreId = 5, Title = "ADULTERY" },
                        new { Id = new Guid("fb0de218-6e74-42c3-9c27-0a380a9e25b3"), AuthorId = 3, BooksInStore = 10, Description = "A crisis of faith is the impetus for a journey through time and space, on a path that teaches love, forgiveness and courage.", GenreId = 4, Title = "ALEPH" },
                        new { Id = new Guid("b255cc8e-b5a2-488f-963d-4158a4df5635"), AuthorId = 3, BooksInStore = 10, Description = "", GenreId = 4, Title = "ALEPH" },
                        new { Id = new Guid("c6a5b7e8-c28c-46fc-928f-7565be9708f8"), AuthorId = 3, BooksInStore = 10, Description = "A young Irish girl who desires to become a witch seeks wisdom from teachers of magic and spirituality.", GenreId = 5, Title = "BRIDA" },
                        new { Id = new Guid("94d9540a-7498-4384-b0aa-210100738c2a"), AuthorId = 3, BooksInStore = 10, Description = "A young Brazillian man and a Dutch woman explore their relationship as they travel across Europe and Central Asia to Kathmandu.", GenreId = 2, Title = "HIPPIE" },
                        new { Id = new Guid("9153b951-7a4f-4b85-9275-5e7d43dc65b0"), AuthorId = 3, BooksInStore = 10, Description = "The wisdom of a wise man known as the Copt, set in Jerusalem just before the Crusaders’ invasion in 1099.", GenreId = 9, Title = "MANUSCRIPT FOUND IN ACCRA" },
                        new { Id = new Guid("aa0f0042-7104-4208-9543-ffa677c9b486"), AuthorId = 3, BooksInStore = 10, Description = "A Spanish shepherd boy ventures to Egypt in search of treasure and his destiny.", GenreId = 1, Title = "THE ALCHEMIST" },
                        new { Id = new Guid("ee7047b2-e8c0-4928-9310-ff9822e87061"), AuthorId = 3, BooksInStore = 10, Description = "", GenreId = 5, Title = "THE SPY" },
                        new { Id = new Guid("ba0a372c-9366-4efd-93ea-11193ee007cb"), AuthorId = 3, BooksInStore = 10, Description = "", GenreId = 5, Title = "THE WINNER STANDS ALONE" },
                        new { Id = new Guid("28a1a6f6-ce28-4f67-ba32-2963d79b07db"), AuthorId = 3, BooksInStore = 10, Description = "", GenreId = 9, Title = "WITCH OF PORTOBELLO" },
                        new { Id = new Guid("28b3ba36-0014-4115-bb92-1d6ab0b0366f"), AuthorId = 4, BooksInStore = 10, Description = "A wizard hones his conjuring skills in the service of fighting evil.", GenreId = 2, Title = "HARRY POTTER" },
                        new { Id = new Guid("db40e97a-c060-455e-a067-ff7b972f7cb1"), AuthorId = 5, BooksInStore = 10, Description = "One hundred years before \"Ender's Game,\" the aliens arrived on Earth with fire and death. This is the story of the First Formic War.", GenreId = 5, Title = "EARTH AFIRE" },
                        new { Id = new Guid("2fa26ab6-8643-4f2f-a819-1ef1151e58a1"), AuthorId = 5, BooksInStore = 10, Description = "", GenreId = 1, Title = "EARTH AWAKENS" },
                        new { Id = new Guid("a8fda031-f01f-4df6-ac52-4197bd498675"), AuthorId = 5, BooksInStore = 10, Description = "The beginning of the First Formic War; the back story to “Ender’s Game.”", GenreId = 9, Title = "EARTH UNAWARE" },
                        new { Id = new Guid("6080adc9-53b8-409c-ac6e-0a02256a92a7"), AuthorId = 5, BooksInStore = 10, Description = "The latest entry in the “Ender” science fiction series.", GenreId = 5, Title = "ENDER IN EXILE" },
                        new { Id = new Guid("84cc6356-e091-40a8-914f-86c1908df2db"), AuthorId = 5, BooksInStore = 10, Description = "To develop a secure defense against a hostile alien race's next attack, government agencies breed child geniuses and train them as soldiers.", GenreId = 5, Title = "ENDER'S GAME" },
                        new { Id = new Guid("0b21f6e9-5255-457a-a10c-3a4b5b5ccd5b"), AuthorId = 5, BooksInStore = 10, Description = "A boy can not only see the past but also revise it.", GenreId = 7, Title = "PATHFINDER" },
                        new { Id = new Guid("592b084f-57c2-456d-89d9-8c45c01ec133"), AuthorId = 5, BooksInStore = 10, Description = "Adventures and time travel continue in the second book of the “Pathfinder” series.", GenreId = 9, Title = "RUINS" },
                        new { Id = new Guid("512223e3-1c6a-4e7d-b351-056f3ce80621"), AuthorId = 5, BooksInStore = 10, Description = "Bean explores the stars with his genetically engineered children in this entry in the “Ender” science fiction series; a sequel to “Shadow of the Giant.”", GenreId = 9, Title = "SHADOWS IN FLIGHT" },
                        new { Id = new Guid("eb7f7257-6fa7-4a09-aed0-a6b201ed8a82"), AuthorId = 5, BooksInStore = 10, Description = "Thousands of years after the events of \"Ender's Game,\" a second alien race has been discovered.", GenreId = 9, Title = "SPEAKER FOR THE DEAD" },
                        new { Id = new Guid("1d7f1953-64a6-4c74-bb6c-83d6a4dc9208"), AuthorId = 5, BooksInStore = 10, Description = "", GenreId = 6, Title = "THE GATE THIEF" },
                        new { Id = new Guid("af5c9a6b-78e8-4c24-827f-9f19a4d252f4"), AuthorId = 5, BooksInStore = 10, Description = "", GenreId = 6, Title = "THE LOST GATE" },
                        new { Id = new Guid("c7c2cc1e-a286-4d28-b45d-aa8f2acaa36d"), AuthorId = 6, BooksInStore = 10, Description = "The protagonist of \"The Hunger Games\" returns.", GenreId = 8, Title = "CATCHING FIRE" },
                        new { Id = new Guid("bb38aa31-bde9-49ad-93d2-50d7d1c0dd2e"), AuthorId = 6, BooksInStore = 10, Description = "", GenreId = 4, Title = "Mockingjay (The Final Book of The Hunger Games)" },
                        new { Id = new Guid("3f2a0e4a-f0cd-46a4-9c30-4335bff743fc"), AuthorId = 6, BooksInStore = 10, Description = "In a dystopia, a girl fights for survival on live TV.", GenreId = 8, Title = "THE HUNGER GAMES" },
                        new { Id = new Guid("283280ea-2c14-480a-b91a-6de1c2dfdea7"), AuthorId = 6, BooksInStore = 10, Description = "In a dystopian future, a girl fights for survival on live TV.", GenreId = 7, Title = "THE HUNGER GAMES" },
                        new { Id = new Guid("c495dffe-7966-4cc7-8ec2-bb0148981636"), AuthorId = 7, BooksInStore = 10, Description = "", GenreId = 9, Title = "THE  HOST" },
                        new { Id = new Guid("f2125477-d1e5-45f2-8704-8de3e0453ca8"), AuthorId = 7, BooksInStore = 10, Description = "A specialist in chemically controlled torture, on the run from her former employers, takes on one last job.", GenreId = 5, Title = "THE CHEMIST" },
                        new { Id = new Guid("0e263c64-b18c-47cc-9243-ccddb933a5a1"), AuthorId = 7, BooksInStore = 10, Description = "In this first adult novel by the author of the Twilight series for teenagers, aliens have taken control of the minds and bodies of most humans, but one woman won’t surrender; originally published in 2008.", GenreId = 8, Title = "THE HOST" },
                        new { Id = new Guid("af5433f7-17f5-43e7-aba8-3c26052fc05d"), AuthorId = 7, BooksInStore = 10, Description = "Vampires and werewolves and their intrigues in high school.", GenreId = 9, Title = "THE TWILIGHT SAGA" },
                        new { Id = new Guid("a987c3e2-81a3-45f6-819f-52a618b62774"), AuthorId = 7, BooksInStore = 10, Description = "A definitive guide to all things “Twilight.”", GenreId = 8, Title = "THE TWILIGHT SAGA: THE OFFICIAL ILLUSTRATED GUIDE" },
                        new { Id = new Guid("cd40b365-e25a-462f-9fb9-7c2d01df33c4"), AuthorId = 7, BooksInStore = 10, Description = "The comic adaptation of the ever-popular vampire series.", GenreId = 7, Title = "TWILIGHT, VOL. 1" },
                        new { Id = new Guid("808fa1c0-ebeb-4c39-895b-ba91498280e7"), AuthorId = 7, BooksInStore = 10, Description = "The graphic novel version of the \"Twilight\" saga continues.", GenreId = 1, Title = "TWILIGHT: NEW MOON, VOL. 1" },
                        new { Id = new Guid("a49feace-badd-4103-89de-81a37049a5af"), AuthorId = 7, BooksInStore = 10, Description = "The comic adaptation of the ever-popular vampire series.", GenreId = 6, Title = "TWILIGHT: THE GRAPHIC NOVEL, VOL. 2" },
                        new { Id = new Guid("47b05e58-2287-4731-bb94-b811bd4e339b"), AuthorId = 8, BooksInStore = 10, Description = "Colin Singleton wants to break the pattern of being dumped.", GenreId = 9, Title = "AN ABUNDANCE OF KATHERINES" },
                        new { Id = new Guid("2d148554-48f9-4b0b-9785-747d2b7743a4"), AuthorId = 8, BooksInStore = 10, Description = "Three holiday stories.", GenreId = 2, Title = "LET IT SNOW" },
                        new { Id = new Guid("506c3447-de84-4085-88f1-a54611cb340e"), AuthorId = 8, BooksInStore = 10, Description = "A boy finds excitement when he meets a girl named Alaska.", GenreId = 1, Title = "LOOKING FOR ALASKA" },
                        new { Id = new Guid("8c3c2a5c-49da-4cf1-aa20-dc01bcda64c7"), AuthorId = 8, BooksInStore = 10, Description = "After a night of mischief, the girl Quentin loves disappears.", GenreId = 7, Title = "PAPER TOWNS" },
                        new { Id = new Guid("2bb7301f-7e77-4b18-9042-f1de3e527f2e"), AuthorId = 8, BooksInStore = 10, Description = "A girl faces new realities when she learns she has cancer.", GenreId = 2, Title = "THE FAULT IN OUR STARS" },
                        new { Id = new Guid("3762fdf7-e8ec-4bbf-ba36-6f2d18b14703"), AuthorId = 8, BooksInStore = 10, Description = "Aza and Daisy investigate a mystery with a reward of $100,000.", GenreId = 8, Title = "TURTLES ALL THE WAY DOWN" },
                        new { Id = new Guid("2e9c0164-11ef-4de1-8a6a-2ee50d5ea502"), AuthorId = 8, BooksInStore = 10, Description = "Two boys with the same name join forces in a reality possible only in musical theater.", GenreId = 9, Title = "WILL GRAYSON, WILL GRAYSON" },
                        new { Id = new Guid("435e463c-75f6-4e38-b290-af2d6979cc5f"), AuthorId = 9, BooksInStore = 10, Description = "", GenreId = 2, Title = "Memoirs of a Geisha: A Novel" },
                        new { Id = new Guid("84bc750b-697e-490f-a235-3e607a785425"), AuthorId = 10, BooksInStore = 10, Description = "The tragic fate of the title characters, a donkey named Beatrice and a monkey named Virgil, stuffed animals in a taxidermy shop, is an allegory for the Holocaust; from the author of “The Life of Pi.”", GenreId = 5, Title = "BEATRICE AND VIRGIL" },
                        new { Id = new Guid("fc69b81f-57f0-4f51-be29-97c9ca952d97"), AuthorId = 10, BooksInStore = 10, Description = "An allegory on the high seas, in which a teenage boy and a 450-pound tiger are thrown together in a lifeboat after a shipwreck.", GenreId = 6, Title = "LIFE OF PI" },
                        new { Id = new Guid("fe563320-0367-4cf5-832e-5343bbef5b87"), AuthorId = 10, BooksInStore = 10, Description = "", GenreId = 2, Title = "THE HIGH MOUNTAINS OF PORTUGAL" },
                        new { Id = new Guid("dc0a2c8c-125d-4bb4-821d-014e3a32e871"), AuthorId = 11, BooksInStore = 10, Description = "", GenreId = 4, Title = "Oliver Twist (Dover Thrift Editions)" },
                        new { Id = new Guid("62c4d4b0-4a8c-46d8-8449-2895b6142644"), AuthorId = 11, BooksInStore = 10, Description = "", GenreId = 5, Title = "The Mystery of Edwin Drood (Penguin Classics)" },
                        new { Id = new Guid("66ed702e-5662-4ccd-a975-c45e078d6f82"), AuthorId = 12, BooksInStore = 10, Description = "A scholar tries to save the Vatican from the machinations of an underground society.", GenreId = 1, Title = "ANGELS AND DEMONS" },
                        new { Id = new Guid("83611111-079a-4b5c-8c53-c3003efd2321"), AuthorId = 12, BooksInStore = 10, Description = "The symbologist Robert Langdon, on the run in Florence, must decipher a series of codes created by a Dante-loving scientist.", GenreId = 3, Title = "INFERNO" },
                        new { Id = new Guid("a244b14b-e5ab-4dbc-aaf8-df44f650757e"), AuthorId = 12, BooksInStore = 10, Description = "After reconnecting with one of his first students, who is now a billionaire futurist, symbology professor Robert Langdon must go on a perilous quest with a beautiful museum director.", GenreId = 9, Title = "ORIGIN" },
                        new { Id = new Guid("b6ed3a2f-7a85-409e-aff4-4222a165ce80"), AuthorId = 12, BooksInStore = 10, Description = "The Harvard symbologist Robert Langdon among the Masons.", GenreId = 2, Title = "THE LOST SYMBOL" },
                        new { Id = new Guid("6d6943ae-8aa9-4dba-825a-ba95b9155e09"), AuthorId = 13, BooksInStore = 10, Description = "", GenreId = 5, Title = "Cosette: The Sequel to Les Miserables" },
                        new { Id = new Guid("609d1bfa-3264-4441-b26b-24ff47b33eb7"), AuthorId = 15, BooksInStore = 10, Description = "An oracle's son is able to stop the painful flow of Cyra's powers.", GenreId = 2, Title = "CARVE THE MARK" },
                        new { Id = new Guid("430bb4f6-a512-406e-bc47-668e0ccc5cb2"), AuthorId = 15, BooksInStore = 10, Description = "A girl must prove her mettle in a faction-ridden dystopia.", GenreId = 2, Title = "DIVERGENT" },
                        new { Id = new Guid("5f41652a-ee06-4211-bfd9-95355b2daeb8"), AuthorId = 15, BooksInStore = 10, Description = "A girl must prove herself in a dystopia divided into five factions.", GenreId = 2, Title = "DIVERGENT" },
                        new { Id = new Guid("54b0c36e-bc17-466b-aa84-7ba90d588e64"), AuthorId = 15, BooksInStore = 10, Description = "", GenreId = 7, Title = "FREE FOUR" },
                        new { Id = new Guid("43d825dd-1b38-4436-9e30-72501037ba50"), AuthorId = 15, BooksInStore = 10, Description = "A faction war looms.", GenreId = 2, Title = "INSURGENT" },
                        new { Id = new Guid("f3ac5ab8-a7a1-4e1e-8ba2-f90359a1e30d"), AuthorId = 15, BooksInStore = 10, Description = "In this “Divergent” follow-up, a faction war looms.", GenreId = 7, Title = "INSURGENT" },
                        new { Id = new Guid("0454abbe-57b7-4349-9fcf-82bd3ec263f6"), AuthorId = 15, BooksInStore = 10, Description = "Cyra and Akos fight Lazmet, the tyrant who was thought to be dead.", GenreId = 4, Title = "THE FATES DIVIDE" },
                        new { Id = new Guid("6064eda7-ff6c-47a3-a469-3c824450179a"), AuthorId = 16, BooksInStore = 10, Description = "The love of a mortal man for an immortal elf, which figures in “The Silmarillion” and is part of the back story of “Lord of the Rings.” Edited by Christopher Tolkien.", GenreId = 3, Title = "BEREN AND LÚTHIEN" },
                        new { Id = new Guid("57dc09a9-9a78-4961-8d91-a4c210ef12a4"), AuthorId = 16, BooksInStore = 10, Description = "Thousands of years before the events of “The Lord of the Rings,” a hero named Tuor visits a secret city. Edited by Christopher Tolkien.", GenreId = 8, Title = "THE FALL OF GONDOLIN" },
                        new { Id = new Guid("afe0f5ba-0976-4487-9232-b75916c1a42b"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 4, Title = "A Jew In America: My Life and A People's Struggle for Identity" },
                        new { Id = new Guid("01776fc2-b579-4627-a00e-12c500de5f09"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 4, Title = "Agitations: Essays on Life and Literature" },
                        new { Id = new Guid("e2e15a74-dffb-4b50-a3fb-6d2ba35cf320"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 3, Title = "AN INQUIRY INTO THE NATURE AND CAUSES OF THE WEALTH OF STATES" },
                        new { Id = new Guid("7885fd30-2771-42eb-a3ea-60339ac3c1af"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 9, Title = "Angelica: A Novel" },
                        new { Id = new Guid("10e6c695-a490-4201-bac7-b4b10cc643ba"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 2, Title = "Another Good Loving Blues" },
                        new { Id = new Guid("d77c7b19-ce96-45d1-86f7-6adc7583a11c"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 2, Title = "Beyond the Mountain" },
                        new { Id = new Guid("842a9353-816b-4257-9c4c-485849b2ad37"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 3, Title = "Boogaloo: The Quintessence of American Popular Music" },
                        new { Id = new Guid("dc7cc85f-8045-4cce-a89c-2388f826e969"), AuthorId = 17, BooksInStore = 10, Description = "Riley Jenson, part vampire, part werewolf, juggles multiple murder cases and a pair of jealous lovers.", GenreId = 7, Title = "BOUND TO SHADOWS" },
                        new { Id = new Guid("8bff6cb7-79cf-4f6a-b4f1-a72104760a56"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 2, Title = "City Room" },
                        new { Id = new Guid("b2481438-4e95-450f-aa59-bf9bf6ba4ae6"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 2, Title = "Conversations with Miller" },
                        new { Id = new Guid("57f4ea15-b5db-4aa9-902c-87c486b7162b"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 7, Title = "DARKNESS RISING" },
                        new { Id = new Guid("99bfe89d-e4ea-48ce-836f-8de1e519a1fa"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 5, Title = "DARKNESS UNBOUND" },
                        new { Id = new Guid("41a0fa19-685b-4843-b57b-c7b687601d21"), AuthorId = 17, BooksInStore = 10, Description = "Riley Jensen tracks a new villain while juggling passions for her vampire lover and a rogue wolf.", GenreId = 8, Title = "DEADLY DESIRE" },
                        new { Id = new Guid("e2176637-b035-4681-bfbf-94a12e1e1366"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 7, Title = "Desire and Delusion: Three Novellas" },
                        new { Id = new Guid("7d53ecee-5476-4832-9dcf-a352a0be25bb"), AuthorId = 17, BooksInStore = 10, Description = "A woman and a man with superhuman powers flee dangerous killers from Scotland.", GenreId = 2, Title = "DESTINY KILLS" },
                        new { Id = new Guid("09dbe2b5-2a0b-4535-a2e9-9cf1ee723014"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 8, Title = "Detective" },
                        new { Id = new Guid("b0ba7365-cfb0-46fb-91fb-f91fbeb175e1"), AuthorId = 17, BooksInStore = 10, Description = "A biography and assessment of the influential twentieth-century American photographer.", GenreId = 1, Title = "DIANE ARBUS" },
                        new { Id = new Guid("7c73afc8-f3c1-4144-90a1-3255ab53277a"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 9, Title = "Dogwalker: Stories" },
                        new { Id = new Guid("05ca6f0b-7142-4b8d-9fd7-75b0bd0a8010"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 2, Title = "Equality and Education: Federal Civil Rights Enforcement in the New York City School System" },
                        new { Id = new Guid("7519f087-4685-439f-bb3f-2c390bd89017"), AuthorId = 17, BooksInStore = 10, Description = "How American business produced victory in World War II.", GenreId = 8, Title = "FREEDOM'S FORGE" },
                        new { Id = new Guid("e316b5d5-3952-4539-a8e6-59099cfc3e08"), AuthorId = 18, BooksInStore = 10, Description = "", GenreId = 6, Title = "A Life of Picasso, Volume II: 1907-1917 - The Painter of Modern Life" },
                        new { Id = new Guid("31496102-4d73-41f3-85d6-81305f2a82b6"), AuthorId = 18, BooksInStore = 10, Description = "Tricks for new treat creations.", GenreId = 9, Title = "CUPCAKES, COOKIES AND PIE, OH, MY!" },
                        new { Id = new Guid("54bca25e-a5d5-4b11-8dc6-205b07e70449"), AuthorId = 18, BooksInStore = 10, Description = "", GenreId = 6, Title = "Generation Without Memory: A Jewish Journey in Christian America" },
                        new { Id = new Guid("b4ffaee2-4fd5-4355-a714-646e69a9cd71"), AuthorId = 18, BooksInStore = 10, Description = "Behind-the-scenes photographs of the pop star.", GenreId = 5, Title = "LADY GAGA x TERRY RICHARDSON" },
                        new { Id = new Guid("04c079a1-c0c5-4a37-8bcc-8fbbdf5c5be8"), AuthorId = 18, BooksInStore = 10, Description = "A five-step system for meeting sales objectives and increasing business.", GenreId = 9, Title = "PERFECT SELLING" },
                        new { Id = new Guid("b1692bd6-76f0-4273-905c-7ae9fef53b6c"), AuthorId = 18, BooksInStore = 10, Description = "", GenreId = 3, Title = "Sacred Monsters, Sacred Masters: Beaton, Capote, Dalí, Picasso, Freud, Warhol, and More" },
                        new { Id = new Guid("328160ca-dfa4-4a24-bfb1-5a999e6ef1ae"), AuthorId = 18, BooksInStore = 10, Description = "", GenreId = 6, Title = "THE ISLAMIC ANTICHRIST" },
                        new { Id = new Guid("072f585b-495c-4885-9ad1-970c486279a3"), AuthorId = 18, BooksInStore = 10, Description = "", GenreId = 2, Title = "The Sorcerer's Apprentice: Picasso, Provence, and Douglas Cooper" },
                        new { Id = new Guid("5dcddf2d-13e6-4da6-9f89-e50cfe91cde4"), AuthorId = 18, BooksInStore = 10, Description = "", GenreId = 1, Title = "Wallace Stevens: The Early Years, 1879-1923" },
                        new { Id = new Guid("0fe17341-4f5f-421b-a3c1-16299037a011"), AuthorId = 18, BooksInStore = 10, Description = "", GenreId = 7, Title = "What Terrorists Want: Understanding the Enemy, Containing the Threat" },
                        new { Id = new Guid("3a13cf7c-c91c-42b3-9ac2-f36d8bb28f50"), AuthorId = 18, BooksInStore = 10, Description = "Simple cupcake designs and recipes.", GenreId = 1, Title = "WHAT'S NEW, CUPCAKE?" }
                    );
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new { Id = 1, GenreName = "Fantasy" },
                        new { Id = 2, GenreName = "Drama" },
                        new { Id = 3, GenreName = "Action and Adventure" },
                        new { Id = 4, GenreName = "Romance" },
                        new { Id = 5, GenreName = "Mystery" },
                        new { Id = 6, GenreName = "Horror" },
                        new { Id = 7, GenreName = "Science" },
                        new { Id = 8, GenreName = "History" },
                        new { Id = 9, GenreName = "Math" },
                        new { Id = 10, GenreName = "Comics" }
                    );
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TownName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasData(
                        new { Id = 1, TownName = "Westphalia" },
                        new { Id = 2, TownName = "Jardine" },
                        new { Id = 3, TownName = "Brambleton" },
                        new { Id = 4, TownName = "Coleville" },
                        new { Id = 5, TownName = "Cressey" },
                        new { Id = 6, TownName = "Kiskimere" },
                        new { Id = 7, TownName = "Williamson" },
                        new { Id = 8, TownName = "Foscoe" },
                        new { Id = 9, TownName = "Stockdale" },
                        new { Id = 10, TownName = "Kimmell" },
                        new { Id = 11, TownName = "Escondida" },
                        new { Id = 12, TownName = "Zeba" },
                        new { Id = 13, TownName = "Brutus" },
                        new { Id = 14, TownName = "Galesville" },
                        new { Id = 15, TownName = "Hatteras" },
                        new { Id = 16, TownName = "Dupnitsa" }
                    );
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("AddOnDate");

                    b.Property<int>("AddressId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "88ae1ada-d287-4b45-b048-e1b11b1c048b", AccessFailedCount = 0, AddOnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), AddressId = 1, ConcurrencyStamp = "f21fcb8f-8c21-468b-985e-c04cb475dd0c", Email = "admin@mail.com", EmailConfirmed = true, FirstName = "Admin", IsDeleted = false, LastName = "AdminLastName", LockoutEnabled = false, NormalizedEmail = "ADMIN@MAIL.COM", NormalizedUserName = "ADMINMAIN", PasswordHash = "AQAAAAEAACcQAAAAEAfBUytfNPbQ+L/8uRYSAOhsZbt6rpJfRei8yOEvW92FCmTK3zTW+gAmrqj//jxIyA==", PhoneNumber = "+111111111", PhoneNumberConfirmed = true, SecurityStamp = "0e905a28-dcfb-4fb1-8869-129035dc9486", TwoFactorEnabled = false, UserName = "adminMain" }
                    );
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.UsersBooks", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<Guid>("BookId");

                    b.Property<bool>("IsReturn");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UsersBooks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "1", ConcurrencyStamp = "343f2249-cfe0-48d7-b417-c8fe0133ad88", Name = "Admin", NormalizedName = "ADMIN" },
                        new { Id = "2", ConcurrencyStamp = "c6f664fa-dd0b-409a-b3a2-b4538b5810dc", Name = "User", NormalizedName = "USER" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "88ae1ada-d287-4b45-b048-e1b11b1c048b", RoleId = "1" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.Address", b =>
                {
                    b.HasOne("LibrarySystem.Data.Models.Town", "Town")
                        .WithMany("Addresses")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.Book", b =>
                {
                    b.HasOne("LibrarySystem.Data.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LibrarySystem.Data.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.User", b =>
                {
                    b.HasOne("LibrarySystem.Data.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.UsersBooks", b =>
                {
                    b.HasOne("LibrarySystem.Data.Models.Book", "Book")
                        .WithMany("UsersBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LibrarySystem.Data.Models.User", "User")
                        .WithMany("UsersBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LibrarySystem.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LibrarySystem.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LibrarySystem.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LibrarySystem.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
