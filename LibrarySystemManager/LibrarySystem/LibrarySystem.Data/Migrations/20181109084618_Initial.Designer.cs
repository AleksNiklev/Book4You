// <auto-generated />
using System;
using LibrarySystem.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibrarySystem.Data.Migrations
{
    [DbContext(typeof(LibrarySystemContext))]
    [Migration("20181109084618_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LibrarySystem.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TownId");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new { Id = 1, StreetAddress = "AdminAddres", TownId = 1 }
                    );
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new { Id = 1, Name = "Stephen King" },
                        new { Id = 2, Name = "Stephen King " },
                        new { Id = 3, Name = "Scott Snyder " },
                        new { Id = 4, Name = "Scott Snyder" },
                        new { Id = 5, Name = "George R R Martin" },
                        new { Id = 6, Name = "edited  George R R Martin " },
                        new { Id = 7, Name = "Paulo Coelho" },
                        new { Id = 8, Name = "JK Rowling" },
                        new { Id = 9, Name = "Orson Scott Card" },
                        new { Id = 10, Name = "Orson Scott Card " },
                        new { Id = 11, Name = "Suzanne Collins" },
                        new { Id = 12, Name = "Stephenie Meyer" },
                        new { Id = 13, Name = "Stephenie Meyer " },
                        new { Id = 14, Name = "John Green" },
                        new { Id = 15, Name = "John Green " },
                        new { Id = 16, Name = "Arthur Golden" },
                        new { Id = 17, Name = "Yann Martel" },
                        new { Id = 18, Name = "Charles Dickens" },
                        new { Id = 19, Name = "Dan Brown" },
                        new { Id = 20, Name = "Victor Hugo" },
                        new { Id = 21, Name = "Veronica Roth" },
                        new { Id = 22, Name = "JRR Tolkien" },
                        new { Id = 23, Name = "Arthur Hertzberg" },
                        new { Id = 24, Name = "Arthur Krystal" },
                        new { Id = 25, Name = "Arthur B Laffer" },
                        new { Id = 26, Name = "Arthur Phillips" },
                        new { Id = 27, Name = "Arthur Flowers" },
                        new { Id = 28, Name = "Elizabeth Arthur" },
                        new { Id = 29, Name = "Arthur Kempton" },
                        new { Id = 30, Name = "Keri Arthur" },
                        new { Id = 31, Name = "Arthur Gelb" },
                        new { Id = 32, Name = "Arthur Miller" },
                        new { Id = 33, Name = "Arthur Schnitzler" },
                        new { Id = 34, Name = "Arthur Hailey" },
                        new { Id = 35, Name = "Arthur Lubow" },
                        new { Id = 36, Name = "Arthur Bradford" },
                        new { Id = 37, Name = "Arthur R. Block" },
                        new { Id = 38, Name = "Arthur Herman" },
                        new { Id = 39, Name = "John Richardson" },
                        new { Id = 40, Name = "Karen Tack " },
                        new { Id = 41, Name = "Anne Richardson Roiphe" },
                        new { Id = 42, Name = "Lady Gaga " },
                        new { Id = 43, Name = "Linda Richardson" },
                        new { Id = 44, Name = "Joel Richardson" },
                        new { Id = 45, Name = "Joan Richardson" },
                        new { Id = 46, Name = "Louise Richardson" }
                    );
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AuthorId");

                    b.Property<int>("BooksInStore");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("GenreId");

                    b.Property<string>("ImageName");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new { Id = new Guid("4a14c038-049f-46a4-82b8-f290196d2bc8"), AuthorId = 1, BooksInStore = 10, Description = "An English teacher travels back to 1958 by way of a time portal in a Maine diner. His assignment: Stop Lee Harvey Oswald.", GenreId = 5, Title = "11/22/63" },
                        new { Id = new Guid("af10d648-c40c-4ea7-9a78-cc48685ace1e"), AuthorId = 2, BooksInStore = 10, Description = "An elderly widower watches baseballt to distract himself from his wife's death, but figures from his past appear every night in the seat behind home plate; a Kindle single.", GenreId = 4, Title = "A FACE IN THE CROWD" },
                        new { Id = new Guid("4c5159cf-fc4a-419f-958c-63b21f78ced4"), AuthorId = 1, BooksInStore = 10, Description = "An unsuspecting accountant's wife makes a disturbing discovery; first published in 2010, now a movie.", GenreId = 5, Title = "A GOOD MARRIAGE" },
                        new { Id = new Guid("5aa59022-3868-4e72-bafe-82ff91503944"), AuthorId = 3, BooksInStore = 10, Description = "This series, about a new species of vampire that does not have the traditional weakness, shifts to Las Vegas in the 1930's and a number of corpses that have turned up drained of blood.", GenreId = 3, Title = "AMERICAN VAMPIRE, VOL. 1" },
                        new { Id = new Guid("16cc9e8c-42f1-4cc8-9d98-fc26020f2222"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 7, Title = "Bag of Bones" },
                        new { Id = new Guid("c39c4de1-d375-4c06-8e50-d9c373164169"), AuthorId = 1, BooksInStore = 10, Description = "A tale about the dark side of baseball, circa 1957.", GenreId = 5, Title = "BLOCKADE BILLY" },
                        new { Id = new Guid("8fa08615-35bb-45ce-bc83-391fb9009014"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 2, Title = "Cell: A Novel" },
                        new { Id = new Guid("43a3fdc1-66af-4564-9300-e6f7c103bf3f"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 9, Title = "Christine (Signet)" },
                        new { Id = new Guid("66b32ec8-50bc-4e43-8b02-a340361c4884"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 1, Title = "Danse Macabre" },
                        new { Id = new Guid("c1334977-dd86-4752-9b3f-0f11fa252ae6"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 9, Title = "Different Seasons (Signet)" },
                        new { Id = new Guid("e6c7ee72-32d5-456e-b156-f8f89b727048"), AuthorId = 1, BooksInStore = 10, Description = "Now grown up, Dan, the boy with psycho-intuitive powers in “The Shining,” helps another child with a spectacular gift.", GenreId = 2, Title = "DOCTOR SLEEP" },
                        new { Id = new Guid("8fd1531b-2621-4a82-baab-463e859cb79a"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 7, Title = "Dolores Claiborne" },
                        new { Id = new Guid("ef30482c-676c-4a88-b89e-f6ee867938db"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 7, Title = "Dreamcatcher" },
                        new { Id = new Guid("b95841a7-057d-43c2-984d-1fe23ff243ff"), AuthorId = 1, BooksInStore = 10, Description = "A Minnesota contractor moves to Florida to recover from an injury and starts creating paintings with eerie powers.", GenreId = 5, Title = "DUMA KEY" },
                        new { Id = new Guid("5ce7f668-12d8-431c-873f-58602f1e812b"), AuthorId = 1, BooksInStore = 10, Description = "A man who is losing weight without getting thinner forms an unlikely alliance with his neighbors who are dealing with prejudices.", GenreId = 6, Title = "ELEVATION" },
                        new { Id = new Guid("93703d1c-3381-4617-bfb8-936c43f6b157"), AuthorId = 1, BooksInStore = 10, Description = "The conclusion of the Bill Hodges trilogy.", GenreId = 5, Title = "END OF WATCH" },
                        new { Id = new Guid("7a8152b7-5bc6-4b44-90e2-296adb6b7240"), AuthorId = 1, BooksInStore = 10, Description = "", GenreId = 7, Title = "Everything's Eventual: 14 Dark Tales" },
                        new { Id = new Guid("826135e9-b7ae-4871-8955-c68ea4002c57"), AuthorId = 1, BooksInStore = 10, Description = "This second novel of the Bill Hodges trilogy involves a dead writer, his obsessed murderer and a coveted manuscript.", GenreId = 8, Title = "FINDERS KEEPERS" },
                        new { Id = new Guid("7fadb4d8-1de0-48b2-83c8-2e204b61c4ba"), AuthorId = 1, BooksInStore = 10, Description = "Grisly human behavior and its consequences drive this collection of stories.", GenreId = 1, Title = "FULL DARK, NO STARS" },
                        new { Id = new Guid("4ef79a67-de98-45d8-afcf-b17c75f7ff92"), AuthorId = 5, BooksInStore = 10, Description = "From the citadel of Dragonstone to the shores of Winterfell, factions vie for control of a divided land; Book 2 of \"A Song of Ice and Fire.\"", GenreId = 5, Title = "A CLASH OF KINGS" },
                        new { Id = new Guid("92d3dde0-5d2b-45cf-bf87-0d3b6082fbf8"), AuthorId = 5, BooksInStore = 10, Description = "After a colossal battle, the Seven Kingdoms face new threats.", GenreId = 2, Title = "A DANCE WITH DRAGONS" },
                        new { Id = new Guid("28a5ddb3-bc7d-4602-bc05-7f207c2b53df"), AuthorId = 5, BooksInStore = 10, Description = "The seven powers dividing the land have reached an uneasy truce; Book 4 of \"A Song of Ice and Fire.\"", GenreId = 4, Title = "A FEAST FOR CROWS" },
                        new { Id = new Guid("342d086d-addc-4ca8-b6df-305f4ae60a87"), AuthorId = 5, BooksInStore = 10, Description = "In the frozen wastes to the north of Winterfell, sinister and supernatural forces are mustering. Basis of the HBO series.", GenreId = 7, Title = "A GAME OF THRONES" },
                        new { Id = new Guid("a2ac1436-ad8b-47ac-816f-0039f76e1806"), AuthorId = 5, BooksInStore = 10, Description = "The collected Song of Ice and Fire series.", GenreId = 5, Title = "A GAME OF THRONES: FIVE-BOOK SET" },
                        new { Id = new Guid("b8a6673e-1ac3-4462-8af6-f187787a830e"), AuthorId = 5, BooksInStore = 10, Description = "A collection of three official prequels to “A Song of Ice and Fire.”", GenreId = 4, Title = "A KNIGHT OF THE SEVEN KINGDOMS" },
                        new { Id = new Guid("400e0605-acc4-4cee-bd73-ec76260a77e2"), AuthorId = 5, BooksInStore = 10, Description = "A set that includes the first four volumes of Martin's epic fantasy series.", GenreId = 4, Title = "A SONG OF ICE AND FIRE" },
                        new { Id = new Guid("222bd987-8c23-4567-a926-319af6d8a032"), AuthorId = 5, BooksInStore = 10, Description = "Wars continue to rage over the Iron Throne as alliances are made and broken; Book 3 of \"A Song of Ice and Fire.\"", GenreId = 1, Title = "A STORM OF SWORDS" },
                        new { Id = new Guid("59af970d-9272-473a-a168-ab75528b7911"), AuthorId = 6, BooksInStore = 10, Description = "", GenreId = 5, Title = "DANGEROUS WOMEN" },
                        new { Id = new Guid("66d296ce-46d7-4cae-841c-47c367155aa0"), AuthorId = 6, BooksInStore = 10, Description = "Twenty-one original stories from well-known writers, including a new “Game of Thrones” story.", GenreId = 2, Title = "ROGUES" },
                        new { Id = new Guid("b48a2ddf-48b0-41b5-b249-11ee112ea507"), AuthorId = 5, BooksInStore = 10, Description = "A girl tames a dragon and saves her farm.", GenreId = 4, Title = "THE ICE DRAGON" },
                        new { Id = new Guid("ca03cecc-bf28-4390-aa62-c5046ad5d8d0"), AuthorId = 5, BooksInStore = 10, Description = "The history of the Westeros and more about the world of \"Game of Thrones.\"", GenreId = 5, Title = "THE WORLD OF ICE AND FIRE" },
                        new { Id = new Guid("fd1263cd-7e67-40a3-8845-a7b4fb797199"), AuthorId = 7, BooksInStore = 10, Description = " A married journalist risks everything when she embarks on an affair; by the Brazilian writer, the author of “The Alchemist.”.", GenreId = 5, Title = "ADULTERY" },
                        new { Id = new Guid("da0576b1-5f4e-460f-b9fb-3a5de2af3c54"), AuthorId = 7, BooksInStore = 10, Description = "A crisis of faith is the impetus for a journey through time and space, on a path that teaches love, forgiveness and courage.", GenreId = 1, Title = "ALEPH" },
                        new { Id = new Guid("0ab10760-3a2e-4ee7-8720-29e76a683a75"), AuthorId = 7, BooksInStore = 10, Description = "A young Irish girl who desires to become a witch seeks wisdom from teachers of magic and spirituality.", GenreId = 1, Title = "BRIDA" },
                        new { Id = new Guid("2d592693-508b-4df8-b3ca-fa0165549eea"), AuthorId = 7, BooksInStore = 10, Description = "A young Brazillian man and a Dutch woman explore their relationship as they travel across Europe and Central Asia to Kathmandu.", GenreId = 9, Title = "HIPPIE" },
                        new { Id = new Guid("2b5e5e64-e81c-4f26-bf8e-8fd5aad7b479"), AuthorId = 7, BooksInStore = 10, Description = "The wisdom of a wise man known as the Copt, set in Jerusalem just before the Crusaders’ invasion in 1099.", GenreId = 6, Title = "MANUSCRIPT FOUND IN ACCRA" },
                        new { Id = new Guid("e548c619-333e-45f2-b29b-d4c4380ffa2e"), AuthorId = 7, BooksInStore = 10, Description = "A Spanish shepherd boy ventures to Egypt in search of treasure and his destiny.", GenreId = 7, Title = "THE ALCHEMIST" },
                        new { Id = new Guid("77feccbe-e4fa-4b08-9893-958c8482f768"), AuthorId = 7, BooksInStore = 10, Description = "", GenreId = 4, Title = "THE SPY" },
                        new { Id = new Guid("5c9a284d-2545-4319-bf8d-ab2b7f89afd8"), AuthorId = 7, BooksInStore = 10, Description = "", GenreId = 5, Title = "THE WINNER STANDS ALONE" },
                        new { Id = new Guid("fb1755eb-bac1-4661-82ff-f7917430460f"), AuthorId = 7, BooksInStore = 10, Description = "", GenreId = 7, Title = "WITCH OF PORTOBELLO" },
                        new { Id = new Guid("ae2df220-6ed1-4867-8fd7-25ece0d1db85"), AuthorId = 8, BooksInStore = 10, Description = "A wizard hones his conjuring skills in the service of fighting evil.", GenreId = 3, Title = "HARRY POTTER" },
                        new { Id = new Guid("f82b3999-3b89-4d2d-93e6-ecfeee79ca1b"), AuthorId = 9, BooksInStore = 10, Description = "One hundred years before \"Ender's Game,\" the aliens arrived on Earth with fire and death. This is the story of the First Formic War.", GenreId = 9, Title = "EARTH AFIRE" },
                        new { Id = new Guid("3137fad9-86be-46af-9802-1bcf10bbc3e3"), AuthorId = 10, BooksInStore = 10, Description = "", GenreId = 7, Title = "EARTH AWAKENS" },
                        new { Id = new Guid("b5873c9d-b80c-46b1-90af-8340e92e1b64"), AuthorId = 10, BooksInStore = 10, Description = "The beginning of the First Formic War; the back story to “Ender’s Game.”", GenreId = 9, Title = "EARTH UNAWARE" },
                        new { Id = new Guid("288d67c7-a8c3-471e-9b11-8b88909e02c1"), AuthorId = 9, BooksInStore = 10, Description = "The latest entry in the “Ender” science fiction series.", GenreId = 2, Title = "ENDER IN EXILE" },
                        new { Id = new Guid("5674e733-db4c-4f2e-ac0d-efb9ac5520af"), AuthorId = 9, BooksInStore = 10, Description = "To develop a secure defense against a hostile alien race's next attack, government agencies breed child geniuses and train them as soldiers.", GenreId = 2, Title = "ENDER'S GAME" },
                        new { Id = new Guid("b06fa827-4ecd-4ff9-88bd-cefc18dce592"), AuthorId = 9, BooksInStore = 10, Description = "A boy can not only see the past but also revise it.", GenreId = 1, Title = "PATHFINDER" },
                        new { Id = new Guid("43bd8a7d-fe35-470a-8cbd-88ddef4a26d9"), AuthorId = 9, BooksInStore = 10, Description = "Adventures and time travel continue in the second book of the “Pathfinder” series.", GenreId = 4, Title = "RUINS" },
                        new { Id = new Guid("f66a46d0-eaae-4a85-9ed6-828d115c4947"), AuthorId = 9, BooksInStore = 10, Description = "Bean explores the stars with his genetically engineered children in this entry in the “Ender” science fiction series; a sequel to “Shadow of the Giant.”", GenreId = 5, Title = "SHADOWS IN FLIGHT" },
                        new { Id = new Guid("755945e2-7d6d-4e16-8842-732c8ead3bc0"), AuthorId = 9, BooksInStore = 10, Description = "Thousands of years after the events of \"Ender's Game,\" a second alien race has been discovered.", GenreId = 7, Title = "SPEAKER FOR THE DEAD" },
                        new { Id = new Guid("cd46d9cb-9003-425a-9792-df2393a2d973"), AuthorId = 9, BooksInStore = 10, Description = "", GenreId = 8, Title = "THE GATE THIEF" },
                        new { Id = new Guid("34c95223-78b2-4590-83e3-2be14c18fbad"), AuthorId = 9, BooksInStore = 10, Description = "", GenreId = 8, Title = "THE LOST GATE" },
                        new { Id = new Guid("fcf19437-9f02-41b6-93e8-97b45e2e8ac3"), AuthorId = 11, BooksInStore = 10, Description = "The protagonist of \"The Hunger Games\" returns.", GenreId = 2, Title = "CATCHING FIRE" },
                        new { Id = new Guid("34e7b422-4a79-46c5-bd34-25ba913fcf19"), AuthorId = 11, BooksInStore = 10, Description = "", GenreId = 2, Title = "Mockingjay (The Final Book of The Hunger Games)" },
                        new { Id = new Guid("bf66e784-9fe8-4e03-8beb-c819da309f5a"), AuthorId = 11, BooksInStore = 10, Description = "In a dystopia, a girl fights for survival on live TV.", GenreId = 7, Title = "THE HUNGER GAMES" },
                        new { Id = new Guid("d348411d-be97-4e19-b801-b9bb4d428a0a"), AuthorId = 12, BooksInStore = 10, Description = "", GenreId = 5, Title = "THE  HOST" },
                        new { Id = new Guid("51ad5160-d2e1-474d-a247-5b91a70f742a"), AuthorId = 12, BooksInStore = 10, Description = "A specialist in chemically controlled torture, on the run from her former employers, takes on one last job.", GenreId = 5, Title = "THE CHEMIST" },
                        new { Id = new Guid("1b39b13e-ca90-4846-8a71-ef55aa243554"), AuthorId = 12, BooksInStore = 10, Description = "In this first adult novel by the author of the Twilight series for teenagers, aliens have taken control of the minds and bodies of most humans, but one woman won’t surrender; originally published in 2008.", GenreId = 1, Title = "THE HOST" },
                        new { Id = new Guid("3f1e8ce6-8039-4785-af39-9c6be4c5df65"), AuthorId = 12, BooksInStore = 10, Description = "Vampires and werewolves and their intrigues in high school.", GenreId = 2, Title = "THE TWILIGHT SAGA" },
                        new { Id = new Guid("05c00020-9ff5-4a81-8d3f-a7501ed9c88f"), AuthorId = 12, BooksInStore = 10, Description = "A definitive guide to all things “Twilight.”", GenreId = 3, Title = "THE TWILIGHT SAGA: THE OFFICIAL ILLUSTRATED GUIDE" },
                        new { Id = new Guid("702c3756-585b-43cd-aa02-fd93c3d6eb66"), AuthorId = 12, BooksInStore = 10, Description = "The comic adaptation of the ever-popular vampire series.", GenreId = 5, Title = "TWILIGHT, VOL. 1" },
                        new { Id = new Guid("cf20e3db-bbc0-4be3-a3a3-668c1434b06e"), AuthorId = 13, BooksInStore = 10, Description = "The graphic novel version of the \"Twilight\" saga continues.", GenreId = 5, Title = "TWILIGHT: NEW MOON, VOL. 1" },
                        new { Id = new Guid("e2d94fb1-9ef4-4ffb-b318-a2166feedb00"), AuthorId = 13, BooksInStore = 10, Description = "The comic adaptation of the ever-popular vampire series.", GenreId = 1, Title = "TWILIGHT: THE GRAPHIC NOVEL, VOL. 2" },
                        new { Id = new Guid("a679dd37-41f5-4c78-bbd7-4e20dc33093e"), AuthorId = 14, BooksInStore = 10, Description = "Colin Singleton wants to break the pattern of being dumped.", GenreId = 4, Title = "AN ABUNDANCE OF KATHERINES" },
                        new { Id = new Guid("eb174b9b-1f36-4214-8ca0-cada4018bdbc"), AuthorId = 14, BooksInStore = 10, Description = "Three holiday stories.", GenreId = 5, Title = "LET IT SNOW" },
                        new { Id = new Guid("2a5af11c-de2f-4748-ae7a-b519c49d6568"), AuthorId = 14, BooksInStore = 10, Description = "A boy finds excitement when he meets a girl named Alaska.", GenreId = 3, Title = "LOOKING FOR ALASKA" },
                        new { Id = new Guid("e5e173c2-96a7-4470-99fc-254e4415db8c"), AuthorId = 14, BooksInStore = 10, Description = "After a night of mischief, the girl Quentin loves disappears.", GenreId = 2, Title = "PAPER TOWNS" },
                        new { Id = new Guid("6ec99afc-ae0a-46ad-80a4-64b4b0bfa0a5"), AuthorId = 14, BooksInStore = 10, Description = "A girl faces new realities when she learns she has cancer.", GenreId = 3, Title = "THE FAULT IN OUR STARS" },
                        new { Id = new Guid("e25ec47d-88b6-4a22-ba6d-ed1f19b25036"), AuthorId = 14, BooksInStore = 10, Description = "Aza and Daisy investigate a mystery with a reward of $100,000.", GenreId = 7, Title = "TURTLES ALL THE WAY DOWN" },
                        new { Id = new Guid("3e61c63f-fdbc-4386-9ead-6ebdf1561b0c"), AuthorId = 15, BooksInStore = 10, Description = "Two boys with the same name join forces in a reality possible only in musical theater.", GenreId = 7, Title = "WILL GRAYSON, WILL GRAYSON" },
                        new { Id = new Guid("55fc6ea9-93de-44d9-9787-1f8bf772e32a"), AuthorId = 16, BooksInStore = 10, Description = "", GenreId = 2, Title = "Memoirs of a Geisha: A Novel" },
                        new { Id = new Guid("4dbc61ab-40fd-4bfe-8e01-468059442bb0"), AuthorId = 17, BooksInStore = 10, Description = "The tragic fate of the title characters, a donkey named Beatrice and a monkey named Virgil, stuffed animals in a taxidermy shop, is an allegory for the Holocaust; from the author of “The Life of Pi.”", GenreId = 3, Title = "BEATRICE AND VIRGIL" },
                        new { Id = new Guid("dd38353d-6507-414d-a9dc-f3f217a97947"), AuthorId = 17, BooksInStore = 10, Description = "An allegory on the high seas, in which a teenage boy and a 450-pound tiger are thrown together in a lifeboat after a shipwreck.", GenreId = 5, Title = "LIFE OF PI" },
                        new { Id = new Guid("45ba79c1-57c0-4026-9cbe-65dc8637fbf5"), AuthorId = 17, BooksInStore = 10, Description = "", GenreId = 6, Title = "THE HIGH MOUNTAINS OF PORTUGAL" },
                        new { Id = new Guid("13bd1f9f-595e-40f7-9232-fef23466c82b"), AuthorId = 18, BooksInStore = 10, Description = "", GenreId = 2, Title = "Oliver Twist (Dover Thrift Editions)" },
                        new { Id = new Guid("80e77a12-588d-4cbc-976f-5d1f41eda4d8"), AuthorId = 18, BooksInStore = 10, Description = "", GenreId = 7, Title = "The Mystery of Edwin Drood (Penguin Classics)" },
                        new { Id = new Guid("c69aaf98-84f7-40b2-b537-da4470d46413"), AuthorId = 19, BooksInStore = 10, Description = "A scholar tries to save the Vatican from the machinations of an underground society.", GenreId = 3, Title = "ANGELS AND DEMONS" },
                        new { Id = new Guid("9b33117f-32ef-4d36-86bd-6d899902035b"), AuthorId = 19, BooksInStore = 10, Description = "The symbologist Robert Langdon, on the run in Florence, must decipher a series of codes created by a Dante-loving scientist.", GenreId = 8, Title = "INFERNO" },
                        new { Id = new Guid("9d24ec5c-78f0-4152-a422-b78a8f8b0e28"), AuthorId = 19, BooksInStore = 10, Description = "After reconnecting with one of his first students, who is now a billionaire futurist, symbology professor Robert Langdon must go on a perilous quest with a beautiful museum director.", GenreId = 9, Title = "ORIGIN" },
                        new { Id = new Guid("51cc23c6-7718-4aa6-b00a-70cf801d6ad9"), AuthorId = 19, BooksInStore = 10, Description = "The Harvard symbologist Robert Langdon among the Masons.", GenreId = 7, Title = "THE LOST SYMBOL" },
                        new { Id = new Guid("36e7a7b6-50b5-4305-8b9a-1d218c6f7591"), AuthorId = 20, BooksInStore = 10, Description = "", GenreId = 9, Title = "Cosette: The Sequel to Les Miserables" },
                        new { Id = new Guid("84c13418-d34d-414e-9c34-764bd8872e5f"), AuthorId = 21, BooksInStore = 10, Description = "An oracle's son is able to stop the painful flow of Cyra's powers.", GenreId = 3, Title = "CARVE THE MARK" },
                        new { Id = new Guid("18441dcf-b21c-43a2-900c-07a23d8d4392"), AuthorId = 21, BooksInStore = 10, Description = "A girl must prove her mettle in a faction-ridden dystopia.", GenreId = 4, Title = "DIVERGENT" },
                        new { Id = new Guid("48f372c1-76a0-4298-b721-5e6706ed2910"), AuthorId = 21, BooksInStore = 10, Description = "", GenreId = 4, Title = "FREE FOUR" },
                        new { Id = new Guid("66c42f55-f89c-4f55-a7bc-49ecad5083f6"), AuthorId = 21, BooksInStore = 10, Description = "A faction war looms.", GenreId = 6, Title = "INSURGENT" },
                        new { Id = new Guid("be37797f-23dc-4a8f-ba65-20db8f98216d"), AuthorId = 21, BooksInStore = 10, Description = "Cyra and Akos fight Lazmet, the tyrant who was thought to be dead.", GenreId = 1, Title = "THE FATES DIVIDE" },
                        new { Id = new Guid("984e485f-acbc-4b2c-a7b8-c6a8baf42ab3"), AuthorId = 22, BooksInStore = 10, Description = "The love of a mortal man for an immortal elf, which figures in “The Silmarillion” and is part of the back story of “Lord of the Rings.” Edited by Christopher Tolkien.", GenreId = 2, Title = "BEREN AND LÚTHIEN" },
                        new { Id = new Guid("8986fccd-a30f-41f1-afeb-ca70486da071"), AuthorId = 22, BooksInStore = 10, Description = "Thousands of years before the events of “The Lord of the Rings,” a hero named Tuor visits a secret city. Edited by Christopher Tolkien.", GenreId = 8, Title = "THE FALL OF GONDOLIN" },
                        new { Id = new Guid("2ad94fda-90c5-41ba-ba4e-96f2d1402fa1"), AuthorId = 23, BooksInStore = 10, Description = "", GenreId = 8, Title = "A Jew In America: My Life and A People's Struggle for Identity" },
                        new { Id = new Guid("882fb78c-ff92-4986-b4e6-df5a6ec5f7b8"), AuthorId = 24, BooksInStore = 10, Description = "", GenreId = 2, Title = "Agitations: Essays on Life and Literature" },
                        new { Id = new Guid("bc80f9de-ba60-44b2-9cd2-0add86bd7cc5"), AuthorId = 25, BooksInStore = 10, Description = "", GenreId = 1, Title = "AN INQUIRY INTO THE NATURE AND CAUSES OF THE WEALTH OF STATES" },
                        new { Id = new Guid("ed707d8a-4114-4fe0-82c8-b65f9bbcb404"), AuthorId = 26, BooksInStore = 10, Description = "", GenreId = 2, Title = "Angelica: A Novel" },
                        new { Id = new Guid("bb9c7b19-efd7-4b41-9f0d-2cf163374e45"), AuthorId = 27, BooksInStore = 10, Description = "", GenreId = 4, Title = "Another Good Loving Blues" },
                        new { Id = new Guid("7f7248e0-a5ac-42cf-a456-b4515b837dd7"), AuthorId = 28, BooksInStore = 10, Description = "", GenreId = 3, Title = "Beyond the Mountain" },
                        new { Id = new Guid("3cd34861-6f52-4004-a5ba-b1cc23d89606"), AuthorId = 29, BooksInStore = 10, Description = "", GenreId = 3, Title = "Boogaloo: The Quintessence of American Popular Music" },
                        new { Id = new Guid("8d389395-16b2-49d3-8847-0761dffa374a"), AuthorId = 30, BooksInStore = 10, Description = "Riley Jenson, part vampire, part werewolf, juggles multiple murder cases and a pair of jealous lovers.", GenreId = 4, Title = "BOUND TO SHADOWS" },
                        new { Id = new Guid("31c8ee76-12b5-40f9-90e9-d7d42b0753ce"), AuthorId = 31, BooksInStore = 10, Description = "", GenreId = 5, Title = "City Room" },
                        new { Id = new Guid("c57ea465-249f-4a1e-b935-1361fc674edf"), AuthorId = 32, BooksInStore = 10, Description = "", GenreId = 7, Title = "Conversations with Miller" },
                        new { Id = new Guid("b7a347c5-912a-449d-bca1-69f3fa521621"), AuthorId = 30, BooksInStore = 10, Description = "", GenreId = 6, Title = "DARKNESS RISING" },
                        new { Id = new Guid("4d20eed5-3009-4e61-8d21-933532cf50f0"), AuthorId = 30, BooksInStore = 10, Description = "", GenreId = 8, Title = "DARKNESS UNBOUND" },
                        new { Id = new Guid("a28635a1-79ea-43af-aeb7-8f1a53db1599"), AuthorId = 30, BooksInStore = 10, Description = "Riley Jensen tracks a new villain while juggling passions for her vampire lover and a rogue wolf.", GenreId = 6, Title = "DEADLY DESIRE" },
                        new { Id = new Guid("cf33b54c-6aa9-4237-8848-01ad3f9e10b4"), AuthorId = 33, BooksInStore = 10, Description = "", GenreId = 7, Title = "Desire and Delusion: Three Novellas" },
                        new { Id = new Guid("69ada2ee-5fc5-4d88-86ef-12a53b5279a1"), AuthorId = 30, BooksInStore = 10, Description = "A woman and a man with superhuman powers flee dangerous killers from Scotland.", GenreId = 4, Title = "DESTINY KILLS" },
                        new { Id = new Guid("c5f7f1dd-6f60-4c87-8bc6-65dddba79db4"), AuthorId = 34, BooksInStore = 10, Description = "", GenreId = 3, Title = "Detective" },
                        new { Id = new Guid("0f26e8e9-ed1a-46c9-8416-e59748533203"), AuthorId = 35, BooksInStore = 10, Description = "A biography and assessment of the influential twentieth-century American photographer.", GenreId = 4, Title = "DIANE ARBUS" },
                        new { Id = new Guid("7771cca8-d331-4d96-9c38-e4a3bd583f09"), AuthorId = 36, BooksInStore = 10, Description = "", GenreId = 3, Title = "Dogwalker: Stories" },
                        new { Id = new Guid("8aeefb9d-4f4d-4938-87e4-02d340e70e58"), AuthorId = 37, BooksInStore = 10, Description = "", GenreId = 3, Title = "Equality and Education: Federal Civil Rights Enforcement in the New York City School System" },
                        new { Id = new Guid("6ee4c208-acfd-41af-ac64-a8bad800ef2e"), AuthorId = 38, BooksInStore = 10, Description = "How American business produced victory in World War II.", GenreId = 5, Title = "FREEDOM'S FORGE" },
                        new { Id = new Guid("5e0aab77-fe54-47f5-a4df-04e7e8b88a8b"), AuthorId = 39, BooksInStore = 10, Description = "", GenreId = 9, Title = "A Life of Picasso, Volume II: 1907-1917 - The Painter of Modern Life" },
                        new { Id = new Guid("6ce1fffb-6bae-4415-8664-91f60ac39ffc"), AuthorId = 40, BooksInStore = 10, Description = "Tricks for new treat creations.", GenreId = 4, Title = "CUPCAKES, COOKIES AND PIE, OH, MY!" },
                        new { Id = new Guid("2f387bd6-7d81-4a9b-8d7e-9c1a4463bcb3"), AuthorId = 41, BooksInStore = 10, Description = "", GenreId = 8, Title = "Generation Without Memory: A Jewish Journey in Christian America" },
                        new { Id = new Guid("35c6ddde-0cc8-4b6a-8c7e-d79529789585"), AuthorId = 42, BooksInStore = 10, Description = "Behind-the-scenes photographs of the pop star.", GenreId = 2, Title = "LADY GAGA x TERRY RICHARDSON" },
                        new { Id = new Guid("42458cc8-0db0-4a7b-94ed-2162bd433dcb"), AuthorId = 43, BooksInStore = 10, Description = "A five-step system for meeting sales objectives and increasing business.", GenreId = 2, Title = "PERFECT SELLING" },
                        new { Id = new Guid("ce63426c-81c7-45ae-93df-426c6f6d9ba1"), AuthorId = 39, BooksInStore = 10, Description = "", GenreId = 9, Title = "Sacred Monsters, Sacred Masters: Beaton, Capote, Dalí, Picasso, Freud, Warhol, and More" },
                        new { Id = new Guid("1e5f69b5-413d-4e9d-93df-c10e9b99c686"), AuthorId = 44, BooksInStore = 10, Description = "", GenreId = 8, Title = "THE ISLAMIC ANTICHRIST" },
                        new { Id = new Guid("6a6a360f-966d-47df-ba97-7d4e6b36d087"), AuthorId = 39, BooksInStore = 10, Description = "", GenreId = 4, Title = "The Sorcerer's Apprentice: Picasso, Provence, and Douglas Cooper" },
                        new { Id = new Guid("b44ba618-e611-438f-84fb-212735398522"), AuthorId = 45, BooksInStore = 10, Description = "", GenreId = 6, Title = "Wallace Stevens: The Early Years, 1879-1923" },
                        new { Id = new Guid("e9e613d7-bf52-449f-b75f-7c2f0aee87af"), AuthorId = 46, BooksInStore = 10, Description = "", GenreId = 6, Title = "What Terrorists Want: Understanding the Enemy, Containing the Threat" },
                        new { Id = new Guid("21826a25-af2e-40b5-98ea-044b9ed7ef25"), AuthorId = 40, BooksInStore = 10, Description = "Simple cupcake designs and recipes.", GenreId = 2, Title = "WHAT'S NEW, CUPCAKE?" }
                    );
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new { Id = 1, GenreName = "Fantasy" },
                        new { Id = 2, GenreName = "Drama" },
                        new { Id = 3, GenreName = "Action and Adventure" },
                        new { Id = 4, GenreName = "Romance" },
                        new { Id = 5, GenreName = "Mystery" },
                        new { Id = 6, GenreName = "Horror" },
                        new { Id = 7, GenreName = "Science" },
                        new { Id = 8, GenreName = "History" },
                        new { Id = 9, GenreName = "Math" },
                        new { Id = 10, GenreName = "Comics" }
                    );
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TownName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasData(
                        new { Id = 1, TownName = "Westphalia" },
                        new { Id = 2, TownName = "Jardine" },
                        new { Id = 3, TownName = "Brambleton" },
                        new { Id = 4, TownName = "Coleville" },
                        new { Id = 5, TownName = "Cressey" },
                        new { Id = 6, TownName = "Kiskimere" },
                        new { Id = 7, TownName = "Williamson" },
                        new { Id = 8, TownName = "Foscoe" },
                        new { Id = 9, TownName = "Stockdale" },
                        new { Id = 10, TownName = "Kimmell" },
                        new { Id = 11, TownName = "Escondida" },
                        new { Id = 12, TownName = "Zeba" },
                        new { Id = 13, TownName = "Brutus" },
                        new { Id = 14, TownName = "Galesville" },
                        new { Id = 15, TownName = "Hatteras" },
                        new { Id = 16, TownName = "Dupnitsa" }
                    );
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("AddOnDate");

                    b.Property<int>("AddressId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "6dd79306-4615-4d65-8137-0800e2eee7bf", AccessFailedCount = 0, AddOnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), AddressId = 1, ConcurrencyStamp = "12b64ac5-7d3e-4758-af49-2daa2189c4d2", Email = "admin@mail.com", EmailConfirmed = true, FirstName = "Admin", IsDeleted = false, LastName = "AdminLastName", LockoutEnabled = false, NormalizedEmail = "ADMIN@MAIL.COM", NormalizedUserName = "ADMINMAIN", PasswordHash = "AQAAAAEAACcQAAAAECGnSEpH+224s7a7m2pB/KmkWGxlZKzmgwn4zw/YS9I3WY+zA4tz9vy7wy7oaDXFaQ==", PhoneNumber = "+111111111", PhoneNumberConfirmed = true, SecurityStamp = "29de4e75-8597-4c98-97d1-c39e9c6176ce", TwoFactorEnabled = false, UserName = "adminMain" }
                    );
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.UsersBooks", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<Guid>("BookId");

                    b.Property<DateTime>("BorrowDate");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UsersBooks");
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.UsersReadBooks", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<Guid>("BookId");

                    b.Property<DateTime>("BackDate");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("UsersReadBooks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "1", ConcurrencyStamp = "0ab55774-3804-4173-8d0f-5d7c265b3609", Name = "Admin", NormalizedName = "ADMIN" },
                        new { Id = "2", ConcurrencyStamp = "becdeca8-21b8-4544-a602-3a6a4b2f777c", Name = "User", NormalizedName = "USER" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "6dd79306-4615-4d65-8137-0800e2eee7bf", RoleId = "1" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.Address", b =>
                {
                    b.HasOne("LibrarySystem.Data.Models.Town", "Town")
                        .WithMany("Addresses")
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.Book", b =>
                {
                    b.HasOne("LibrarySystem.Data.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LibrarySystem.Data.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.User", b =>
                {
                    b.HasOne("LibrarySystem.Data.Models.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.UsersBooks", b =>
                {
                    b.HasOne("LibrarySystem.Data.Models.Book", "Book")
                        .WithMany("UsersBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LibrarySystem.Data.Models.User", "User")
                        .WithMany("UsersBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LibrarySystem.Data.Models.UsersReadBooks", b =>
                {
                    b.HasOne("LibrarySystem.Data.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LibrarySystem.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LibrarySystem.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LibrarySystem.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LibrarySystem.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LibrarySystem.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
